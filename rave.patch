--- ../rave-0.6.25/src/RecoVertex/VertexTools/src/SequentialVertexFitter.cc	2015-08-14 17:05:48.749219356 +0200
+++ rave-0.6.25/src/RecoVertex/VertexTools/src/SequentialVertexFitter.cc	2024-12-04 02:57:12.701204440 +0100
@@ -13,7 +13,8 @@
   static const float TrackerBoundsRadius = 112;
   static const float TrackerBoundsHalfLength = 273.5;
   bool insideTrackerBounds(const GlobalPoint& point) {
-    return ((point.transverse() < TrackerBoundsRadius)
-        && (abs(point.z()) < TrackerBoundsHalfLength));
+    return true;
+    /* return ((point.transverse() < TrackerBoundsRadius)
+        && (abs(point.z()) < TrackerBoundsHalfLength)); */
   }
 }

--- ../rave-0.6.25/src/ROOT/smatrix/Math/SMatrix.icc	2015-08-14 17:06:09.021859040 +0200
+++ rave-0.6.25/src/ROOT/smatrix/Math/SMatrix.icc	2024-12-13 06:05:11.736401528 +0100
@@ -416,9 +416,24 @@
 template <class T, unsigned int D1, unsigned int D2, class R>
 inline SMatrix<T,D1,D2,R> SMatrix<T,D1,D2,R>::Inverse(int & ifail) const {
    SMatrix<T,D1,D2,R> tmp(*this);
+   SMatrix<T,D1,D2,R> tmp2(*this);
    bool ok = tmp.Invert();
    ifail = 0; 
-   if (!ok) ifail = 1;  
+   if (!ok) {
+      constexpr T epsilon = 1e-11;
+      // Regularize the matrix by adding epsilon to the diagonal
+      for (unsigned int i = 0; i < std::min(D1, D2); ++i) {
+         tmp2(i, i) += epsilon;
+      }
+#if 0
+      std::cout << "We are going to invert this regularized matrix ";
+      tmp2.Print(std::cout);
+      std::cout << std::endl;
+#endif
+      ok = tmp2.Invert();
+      if(!ok) ifail= 1;
+      return tmp2;
+   } 
    return tmp;
 }
 
--- ../rave-0.6.25/src/RaveBase/RaveInterface/src/VertexFactory.cc	2015-08-14 17:05:57.577497929 +0200
+++ rave-0.6.25/src/RaveBase/RaveInterface/src/VertexFactory.cc	2024-12-08 08:42:10.382581559 +0100
@@ -373,8 +373,8 @@
     
     if ( theVerbosity>1 )
     {
-      edm::LogInfo("rave::VertexFactory") 
-          << "produced " << ret.size() << " vertices from " << ttrks.size() << " tracks.";
+//      edm::LogInfo("rave::VertexFactory") 
+//          << "produced " << ret.size() << " vertices from " << ttrks.size() << " tracks.";
     };
     CmsToRaveObjects converter;
   
@@ -392,8 +392,8 @@
   
     if ( theVerbosity>1 )
     {
-        cout << "[rave::VertexFactory] produced " << ret.size() << " vertices from " << ttrks.size()
-                  << " tracks." << endl;
+   //     cout << "[rave::VertexFactory] produced " << ret.size() << " vertices from " << ttrks.size()
+   //               << " tracks." << endl;
     };
  
     return ret;
--- ../rave-0.6.25/src/TrackingTools/TrajectoryParametrization/interface/PerigeeTrajectoryError.h	2015-08-14 17:06:17.894138984 +0200
+++ rave-0.6.25/src/TrackingTools/TrajectoryParametrization/interface/PerigeeTrajectoryError.h	2024-12-06 05:48:44.083489608 +0100
@@ -51,6 +51,7 @@
  
   const AlgebraicSymMatrix55 &weightMatrix(int & error) const
   {
+//    std::cout << "weightmatrix weightisavailable " << weightIsAvailable << std::endl;
     if (!weightIsAvailable) calculateWeightMatrix();
     error = inverseError;
     return thePerigeeWeight;
@@ -59,6 +60,11 @@
   void calculateWeightMatrix() const
   {
     thePerigeeWeight = thePerigeeError.Inverse(inverseError);
+    if(inverseError) {
+      std::cout << "PerigeeTrajectoryError::calculateWeightMatrix" << std::endl;
+      std::cout << thePerigeeError << std::endl; 
+      std::cout << "Inverse error " << inverseError << std::endl;
+    }
     weightIsAvailable = true;
   }
 
